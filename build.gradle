plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

group = 'com.exaroton'
version = project.findProperty("release") ?: "dev"
ext.isReleaseVersion = version != "dev" &&  !version.endsWith("SNAPSHOT")

repositories {
    mavenCentral()
}

dependencies {
    compileOnly(libs.jetbrains.annotations)

    implementation(libs.gson)
    implementation(libs.slf4j.api)


    testCompileOnly(libs.jetbrains.annotations)

    testImplementation(libs.junit)
    testImplementation(libs.slf4j.jdk14)

    testRuntimeOnly(libs.junit.platform.launcher)
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

java {
    withJavadocJar()
    withSourcesJar()

    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

publishing {
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = findProperty('OSSRH_USERNAME')
                password = findProperty('OSSRH_PASSWORD')
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = 'api'
            from components.java
            pom {
                name = 'exaroton API'
                description = 'The official exaroton java library'
                url = 'https://github.com/exaroton/java-exaroton-api'
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/exaroton/java-exaroton-api/blob/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'julian'
                        name = 'Julian Vennen'
                        email = 'julian@aternos.org'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/exaroton/java-exaroton-api.git'
                    developerConnection = 'scm:git:git@github.com:exaroton/java-exaroton-api.git'
                    url = 'https://github.com/exaroton/java-exaroton-api'
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("SIGNING_KEY").toString()
    def signingPassword = findProperty("SIGNING_PASSPHRASE").toString()
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}
tasks.withType(Sign).configureEach {
    onlyIf { isReleaseVersion }
}

jar {
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}
